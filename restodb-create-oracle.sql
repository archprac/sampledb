WHENEVER OSERROR EXIT FAILURE ROLLBACK
WHENEVER SQLERROR EXIT FAILURE ROLLBACK

DROP VIEW IF EXISTS restodb.daily_menu_order_report;
DROP TRIGGER IF EXISTS restodb.customers_trig_upd;
DROP TABLE IF EXISTS restodb.order_menus;
DROP TABLE IF EXISTS restodb.menu_products;
DROP TABLE IF EXISTS restodb.products;
DROP TABLE IF EXISTS restodb.menus;
DROP TABLE IF EXISTS restodb.order_deliveres;
DROP TABLE IF EXISTS restodb.orders;
DROP TABLE IF EXISTS restodb.orderer_customers;
DROP TABLE IF EXISTS restodb.orderer_reserves;
DROP TABLE IF EXISTS restodb.orderer_visits;
DROP TABLE IF EXISTS restodb.orderers;
DROP TABLE IF EXISTS restodb.seats;
DROP TABLE IF EXISTS restodb.customers;
DROP TABLE IF EXISTS restodb.staff_rolls;
DROP TABLE IF EXISTS restodb.shifts;
DROP TABLE IF EXISTS restodb.staff_accesses;
DROP TABLE IF EXISTS restodb.staffs;
DROP TABLE IF EXISTS restodb.rolls;
DROP TABLE IF EXISTS restodb.gates;
DROP TABLE IF EXISTS restodb.calendar;

CREATE TABLE restodb.calendar (
    calendar_date TIMESTAMP NOT NULL,
    calendar_type_cd INT NOT NULL,
    open_time TIMESTAMP,
    close_time TIMESTAMP,
    calendar_comment VARCHAR(1000),
    CONSTRAINT pk_calendar PRIMARY KEY(calendar_date)
);

CREATE TABLE restodb.products (
    id INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1000) NOT NULL,
    product_name VARCHAR(255) NOT NULL,
    provide_cd INT NOT NULL,
    product_overview VARCHAR(4000),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP  NOT NULL,
    deleted_at TIMESTAMP(2),
    CONSTRAINT pk_products PRIMARY KEY(id)
);

CREATE INDEX idx_products_01 ON restodb.products (product_name);

CREATE TABLE restodb.menus (
    id INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1000) NOT NULL,
    menu_name VARCHAR(255) NOT NULL,
    menu_type_cd INT,
    provide_cd INT NOT NULL,
    order_start_time TIMESTAMP,
    order_stop_time TIMESTAMP,
    menu_price DECIMAL(10, 2) NOT NULL,
    menu_overview VARCHAR(4000),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP  NOT NULL,
    deleted_at TIMESTAMP(2),
    CONSTRAINT pk_menus PRIMARY KEY(id)
);

CREATE TABLE restodb.menu_products (
    id INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1000) NOT NULL,
    menu_id INT NOT NULL,
    product_id INT NOT NULL,
    display_order INT NOT NULL,
    CONSTRAINT pk_menu_products PRIMARY KEY(id),
    CONSTRAINT fk_menu_products_01 FOREIGN KEY (menu_id) REFERENCES restodb.menus(id),
    CONSTRAINT fk_menu_products_02 FOREIGN KEY (product_id) REFERENCES restodb.products(id)
);

CREATE TABLE restodb.seats (
    id INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1000) NOT NULL,
    seet_name VARCHAR(1000) NOT NULL,
    seat_type_cd INT NOT NULL,
    seet_count INT NOT NULL,
    seat_comment VARCHAR(4000),
    CONSTRAINT pk_seats PRIMARY KEY(id)
);

CREATE TABLE restodb.customers (
    id INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1000) NOT NULL,
    customer_status_cd INT,
    customer_first_name VARCHAR(255),
    customer_last_name VARCHAR(255),
    gender_cd INT,
    customer_address VARCHAR(255),
    customer_email_address VARCHAR(255),
    customer_phone_number VARCHAR(255),
    integrated_customer_id INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP  NOT NULL,
    deleted_at TIMESTAMP(2),
    CONSTRAINT pk_customers PRIMARY KEY(id),
    CONSTRAINT fk_customers_01 FOREIGN KEY (integrated_customer_id) REFERENCES restodb.customers(id)
);

CREATE INDEX idx_customers_01 ON restodb.customers (customer_first_name, customer_last_name);

CREATE TRIGGER restodb.customers_trig_upd
AFTER UPDATE ON restodb.customers 
FOR EACH ROW
BEGIN
    IF :OLD.integrated_customer_id IS NULL
        AND :NEW.integrated_customer_id IS NOT NULL
    THEN
        UPDATE restodb.customers c 
        SET c.integrated_customer_id = :NEW.integrated_customer_id
        WHERE c.integrated_customer_id = :OLD.id;
    END IF;
END;
/

CREATE TABLE restodb.orderers (
    id INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1000) NOT NULL,
    notice VARCHAR(4000),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP  NOT NULL,
    deleted_at TIMESTAMP(2),
    CONSTRAINT pk_orderers PRIMARY KEY(id)
);

CREATE TABLE restodb.orderer_customers (
    id INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1000) NOT NULL,
    orderer_id INT NOT NULL,
    customer_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP  NOT NULL,
    deleted_at TIMESTAMP(2),
    CONSTRAINT pk_orderer_customers PRIMARY KEY(id),
    CONSTRAINT fk_orderer_customers_01 FOREIGN KEY (orderer_id) REFERENCES restodb.orderers(id),
    CONSTRAINT fk_orderer_customers_02 FOREIGN KEY (customer_id) REFERENCES restodb.customers(id)
);

CREATE TABLE restodb.orderer_reserves (
    id INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1000) NOT NULL,
    orderer_id INT NOT NULL,
    seat_id INT,
    reserve_status_cd INT,
    reserve_start_time TIMESTAMP,
    reserve_end_time TIMESTAMP,
    number_of_people INT,
    CONSTRAINT pk_orderer_reserves PRIMARY KEY(id),
    CONSTRAINT fk_orderer_reserves_01 FOREIGN KEY (orderer_id) REFERENCES restodb.orderers(id),
    CONSTRAINT fk_orderer_reserves_02 FOREIGN KEY (seat_id) REFERENCES restodb.seats(id)
);

CREATE INDEX idx_orderer_reserves_01 ON restodb.orderer_reserves (orderer_id, seat_id);

CREATE TABLE restodb.orderer_visits (
    id INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1000) NOT NULL,
    orderer_id INT NOT NULL,
    seat_id INT,
    check_in TIMESTAMP,
    check_out TIMESTAMP,
    number_of_people INT,
    notice VARCHAR(4000),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP  NOT NULL,
    deleted_at TIMESTAMP(2),
    CONSTRAINT pk_orderer_visits PRIMARY KEY(id),
    CONSTRAINT fk_orderer_visits_01 FOREIGN KEY (orderer_id) REFERENCES restodb.orderers(id),
    CONSTRAINT fk_orderer_visits_02 FOREIGN KEY (seat_id) REFERENCES restodb.seats(id)
);

CREATE INDEX idx_orderer_visits_01 ON restodb.orderer_visits (orderer_id, seat_id);

CREATE TABLE restodb.staffs (
    id INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1000) NOT NULL,
    contract_type_cd INT NOT NULL,
    staff_first_name VARCHAR(255) NOT NULL,
    staff_last_name VARCHAR(255) NOT NULL,
    gender_cd INT,
    staff_address VARCHAR(255),
    staff_email_address VARCHAR(255),
    staff_phone_number VARCHAR(255),
    effective_date TIMESTAMP,
    expiration_date TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP  NOT NULL,
    deleted_at TIMESTAMP(2),
    CONSTRAINT pk_staffs PRIMARY KEY(id)
);

CREATE INDEX idx_staffs_01 ON restodb.staffs (staff_last_name, staff_first_name);

CREATE TABLE restodb.rolls (
    id INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1000) NOT NULL,
    roll_name VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP  NOT NULL,
    deleted_at TIMESTAMP(2),
    CONSTRAINT pk_rolls PRIMARY KEY(id)
);

CREATE INDEX idx_rolls_01 ON restodb.rolls (roll_name);

CREATE TABLE restodb.staff_rolls (
    id INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1000) NOT NULL,
    staff_id INT NOT NULL,
    roll_id INT NOT NULL,
    effective_date TIMESTAMP,
    expiration_date TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP  NOT NULL,
    deleted_at TIMESTAMP(2),
    CONSTRAINT pk_staff_rolls PRIMARY KEY(id),
    CONSTRAINT fk_staff_rolls_01 FOREIGN KEY (staff_id) REFERENCES restodb.staffs(id),
    CONSTRAINT fk_staff_rolls_02 FOREIGN KEY (roll_id) REFERENCES restodb.rolls(id)
);

CREATE INDEX idx_staff_rolls_01 ON restodb.staff_rolls (staff_id, roll_id);

CREATE TABLE restodb.orders (
    id INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1000) NOT NULL,
    orderer_id INT,
    order_datetime TIMESTAMP NOT NULL,
    order_type_cd INT NOT NULL, 
    order_status_cd INT,
    accepted_staff_id INT NOT NULL, 
    cleared_staff_id INT NOT NULL, 
    amount DECIMAL(10, 2) NOT NULL,
    discount DECIMAL(10, 2) DEFAULT 0,
    notice VARCHAR(4000),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP  NOT NULL,
    deleted_at TIMESTAMP(2),
    CONSTRAINT pk_orders PRIMARY KEY(id),
    CONSTRAINT fk_orders_01 FOREIGN KEY (orderer_id) REFERENCES restodb.orderers(id),
    CONSTRAINT fk_orders_02 FOREIGN KEY (accepted_staff_id) REFERENCES restodb.staffs(id),
    CONSTRAINT fk_orders_03 FOREIGN KEY (cleared_staff_id) REFERENCES restodb.staffs(id)
);

CREATE TABLE restodb.order_deliveres (
    id INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1000) NOT NULL,
    order_id INT NOT NULL,
    delivery_staff_id INT NOT NULL, 
    CONSTRAINT pk_order_deliveres PRIMARY KEY(id),
    CONSTRAINT fk_order_deliveres_01 FOREIGN KEY (order_id) REFERENCES restodb.orders(id),
    CONSTRAINT fk_order_deliveres_02 FOREIGN KEY (delivery_staff_id) REFERENCES restodb.staffs(id)
);

CREATE TABLE restodb.order_menus (
    id INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1000) NOT NULL,
    order_id INT NOT NULL,
    menu_id INT NOT NULL,
    order_count INT NOT NULL,
    notice VARCHAR(4000),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP  NOT NULL,
    deleted_at TIMESTAMP(2),
    CONSTRAINT pk_order_menus PRIMARY KEY(id),
    CONSTRAINT fk_order_menus_01 FOREIGN KEY (order_id) REFERENCES restodb.orders(id),
    CONSTRAINT fk_order_menus_02 FOREIGN KEY (menu_id) REFERENCES restodb.menus(id)
);

CREATE TABLE restodb.shifts (
    id INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1000) NOT NULL,
    staff_id INT,
    shift_start_datetime TIMESTAMP,
    shift_end_datetime TIMESTAMP,
    shift_status_cd INT,
    shift_comment VARCHAR(1000),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP  NOT NULL,
    deleted_at TIMESTAMP(2),
    CONSTRAINT pk_shifts PRIMARY KEY(id),
    CONSTRAINT fk_shifts_01 FOREIGN KEY (staff_id) REFERENCES restodb.staffs(id)
);

CREATE TABLE restodb.gates (
    id INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1000) NOT NULL,
    gate_name VARCHAR(500) NOT NULL,
    gate_type_cd INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP  NOT NULL,
    deleted_at TIMESTAMP(2),
    CONSTRAINT pk_gates PRIMARY KEY(id)
);

CREATE TABLE restodb.staff_accesses (
    id INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1000) NOT NULL,
    staff_id INT NOT NULL,
    gate_id INT NOT NULL,
    access_type_cd INT NOT NULL,
    access_datetime TIMESTAMP NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP  NOT NULL,
    deleted_at TIMESTAMP(2),
    CONSTRAINT pk_staff_accesses PRIMARY KEY(id),
    CONSTRAINT fk_staff_accesses_01 FOREIGN KEY (staff_id) REFERENCES restodb.staffs(id),
    CONSTRAINT fk_staff_accesses_02 FOREIGN KEY (gate_id) REFERENCES restodb.gates(id)
);

CREATE VIEW restodb.daily_menu_order_report AS
SELECT 
    c.calendar_date,
    m.menu_name,
    COUNT(*) AS order_count,
    SUM(o.amount) AS total_amount,
    SUM(o.discount) AS total_discount
FROM restodb.calendar c
    JOIN restodb.orders o ON CAST(o.order_datetime AS TIMESTAMP) = c.calendar_date
    JOIN restodb.order_menus om ON om.order_id = o.id
    JOIN restodb.menus m ON m.id = om.menu_id
WHERE om.deleted_at IS NULL
  AND o.deleted_at IS NULL
GROUP BY c.calendar_date, m.id, m.menu_name
ORDER BY c.calendar_date, m.id, m.menu_name;

EXIT;
